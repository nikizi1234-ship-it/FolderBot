import logging
import sqlite3
import os
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from datetime import datetime
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.environ.get('BOT_TOKEN', '8394383082:AAETIr-_lw61ltGEz0SfUujgbwILxErGlgw')
ADMIN_IDS = {5879410668}

# --- –ë–ê–ó–ê –î–ê–ù–ù–´–• SQLite ---
class Database:
    def __init__(self, db_name='/tmp/bot_data.db'):
        self.db_name = db_name
        self.init_database()

    def get_connection(self):
        conn = sqlite3.connect(self.db_name)
        conn.row_factory = sqlite3.Row
        return conn

    def init_database(self):
        with self.get_connection() as conn:
            conn.execute('''
                CREATE TABLE IF NOT EXISTS plan_data (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    key TEXT UNIQUE NOT NULL,
                    value TEXT NOT NULL,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            result = conn.execute('SELECT COUNT(*) as count FROM plan_data').fetchone()
            if result['count'] == 0:
                initial_data = {
                    "version": "1.9",
                    "creation_date": datetime.now().isoformat(),
                    "total_days": 16,
                    "tasks": {
                        "–¢–µ–º–∞": {"completed": 1, "total": 1},
                        "–î–∏–∑–∞–π–Ω": {"completed": 1, "total": 4},
                        "–õ–∞–Ω–¥—à–∞—Ñ—Ç": {"completed": 0, "total": 1},
                        "–°–∫—Ä–∏–ø—Ç–∏–Ω–≥": {"completed": 0, "total": 3},
                        "–¢–µ—Å—Ç–∏—Ä–æ–≤–∫–∞": {"completed": 0, "total": 1},
                        "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è": {"completed": 0, "total": 3},
                        "–í—ã–ø—É—Å–∫": {"completed": 0, "total": 2},
                        "–¢–µ—Å—Ç—ã": {"completed": 0, "total": 1}
                    }
                }
                
                for key, value in initial_data.items():
                    if isinstance(value, (dict, list)):
                        value = json.dumps(value, ensure_ascii=False)
                    conn.execute(
                        'INSERT INTO plan_data (key, value) VALUES (?, ?)',
                        (key, str(value))
                    )

    def get_plan_data(self):
        with self.get_connection() as conn:
            rows = conn.execute('SELECT key, value FROM plan_data').fetchall()
            plan_data = {}
            
            for row in rows:
                key = row['key']
                value = row['value']
                
                try:
                    value = json.loads(value)
                except (json.JSONDecodeError, TypeError):
                    pass
                
                if isinstance(value, str):
                    if value.isdigit():
                        value = int(value)
                    elif value.replace('.', '', 1).isdigit():
                        value = float(value)
                
                plan_data[key] = value
            
            return plan_data

    def update_plan_value(self, key, value):
        with self.get_connection() as conn:
            if isinstance(value, (dict, list)):
                value = json.dumps(value, ensure_ascii=False)
            
            conn.execute(
                'INSERT OR REPLACE INTO plan_data (key, value) VALUES (?, ?)',
                (key, str(value))
            )

    def update_task(self, task_name, completed, total):
        plan_data = self.get_plan_data()
        tasks = plan_data.get('tasks', {})
        
        if task_name in tasks:
            tasks[task_name]['completed'] = completed
            tasks[task_name]['total'] = total
            self.update_plan_value('tasks', tasks)
            return True
        return False

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database()

# --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ---
def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS

def calculate_days_passed(creation_date) -> int:
    if isinstance(creation_date, str):
        creation_date = datetime.fromisoformat(creation_date)
    days_passed = (datetime.now() - creation_date).days
    total_days = db.get_plan_data().get('total_days', 16)
    return min(days_passed, total_days)

def generate_plan_text():
    plan_data = db.get_plan_data()
    days_passed = calculate_days_passed(plan_data.get('creation_date', datetime.now()))
    total_days = plan_data.get('total_days', 16)
    
    plan_text = f"""
üìÖ –ü–ª–∞–Ω —Ä–∞–±–æ—Ç –ø—Ä–æ–µ–∫—Ç–∞
–î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {plan_data.get('version', '1.9')}

--–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–µ—Ä—Å–∏–∏ {days_passed}/{total_days} –¥–Ω–µ–π--

"""
    
    tasks = plan_data.get('tasks', {})
    for task_name, task_data in tasks.items():
        completed = task_data.get('completed', 0)
        total = task_data.get('total', 0)
        plan_text += f"‚Ä¢ {task_name}:\n    {completed}/{total} –¥–Ω–µ–π\n\n"
    
    plan_text += "‚Ä¢ –û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å:\n"
    total_completed = sum(task.get('completed', 0) for task in tasks.values())
    total_tasks = sum(task.get('total', 0) for task in tasks.values())
    percentage = (total_completed / total_tasks * 100) if total_tasks > 0 else 0
    plan_text += f"    {total_completed}/{total_tasks} ({percentage:.1f}%)"
    
    return plan_text

# --- –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê ---
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    welcome_text = """
ü§ñ –Ø –±–æ—Ç –ø–æ–º–æ—â–Ω–∏–∫ –≤ IT —Å—Ñ–µ—Ä–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏, –≥–ª–∞–≤–Ω—ã–π –±–æ—Ç –≤ –¥–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ.

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/plan - –ü–ª–∞–Ω —Ä–∞–±–æ—Ç
/admin - –ò–Ω—Ñ–æ –æ–± –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞—Ö
/rules - –ü—Ä–∞–≤–∏–ª–∞ –≥—Ä—É–ø–ø—ã
/Version - –î–∞–Ω–Ω—ã–µ –æ –≤–µ—Ä—Å–∏—è—Ö
/Creators - –î–∞–Ω–Ω—ã–µ –æ —Å–æ–∑–¥–∞—Ç–µ–ª—è—Ö

/menu - –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏

–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–æ–≤:
/planUpdate <–≤–µ—Ä—Å–∏—è> - –û–±–Ω–æ–≤–∏—Ç—å –≤–µ—Ä—Å–∏—é
/planDesign <–ø—Ä–æ–≥—Ä–µ—Å—Å> - –û–±–Ω–æ–≤–∏—Ç—å –¥–∏–∑–∞–π–Ω
/planTask <–∑–∞–¥–∞—á–∞> <–ø—Ä–æ–≥—Ä–µ—Å—Å> - –û–±–Ω–æ–≤–∏—Ç—å –ª—é–±—É—é –∑–∞–¥–∞—á—É
"""
    await update.message.reply_text(welcome_text)

async def plan_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    plan_text = generate_plan_text()
    await update.message.reply_text(plan_text)

async def plan_update_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!")
        return
    
    if not context.args:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /planUpdate <–Ω–æ–≤–∞—è_–≤–µ—Ä—Å–∏—è>")
        return
    
    new_version = context.args[0]
    db.update_plan_value('version', new_version)
    db.update_plan_value('creation_date', datetime.now().isoformat())
    await update.message.reply_text(f"‚úÖ –í–µ—Ä—Å–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {new_version}!")

async def plan_design_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!")
        return
    
    if not context.args:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /planDesign <–≤—ã–ø–æ–ª–Ω–µ–Ω–æ>/<–≤—Å–µ–≥–æ>")
        return
    
    try:
        progress = context.args[0]
        if '-' in progress:
            completed, total = map(int, progress.split('-'))
        else:
            completed, total = map(int, progress.split('/'))
        
        if db.update_task('–î–∏–∑–∞–π–Ω', completed, total):
            await update.message.reply_text(f"‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å –¥–∏–∑–∞–π–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω: {completed}/{total}")
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∏–∑–∞–π–Ω–∞")
        
    except (ValueError, IndexError):
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /planDesign 2-4 –∏–ª–∏ /planDesign 2/4")

async def plan_task_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!")
        return
    
    if len(context.args) < 2:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /planTask <–∑–∞–¥–∞—á–∞> <–ø—Ä–æ–≥—Ä–µ—Å—Å>")
        plan_data = db.get_plan_data()
        tasks = list(plan_data.get('tasks', {}).keys())
        await update.message.reply_text("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞—á–∏: " + ", ".join(tasks))
        return
    
    task_name = context.args[0]
    progress = context.args[1]
    
    plan_data = db.get_plan_data()
    if task_name not in plan_data.get('tasks', {}):
        await update.message.reply_text(f"‚ùå –ó–∞–¥–∞—á–∞ '{task_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    try:
        if '-' in progress:
            completed, total = map(int, progress.split('-'))
        else:
            completed, total = map(int, progress.split('/'))
        
        if db.update_task(task_name, completed, total):
            await update.message.reply_text(f"‚úÖ –ó–∞–¥–∞—á–∞ '{task_name}' –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {completed}/{total}")
        else:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ '{task_name}'")
        
    except (ValueError, IndexError):
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: 2-4 –∏–ª–∏ 2/4")

async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    admin_info = """
üë®‚Äçüíª –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:
‚Ä¢ @Set_ez - –°–æ–∑–¥–∞—Ç–µ–ª—å
‚Ä¢ @Set_ez - –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä

–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –Ω–∏–º!
"""
    await update.message.reply_text(admin_info)

async def rules_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    rules_text = """
üìú –ü—Ä–∞–≤–∏–ª–∞ –≥—Ä—É–ø–ø—ã:
1. –£–≤–∞–∂–∞–π—Ç–µ –¥—Ä—É–≥ –¥—Ä—É–≥–∞
2. –ù–µ —Å–ø–∞–º—å—Ç–µ
3. –°–æ–æ–±—â–µ–Ω–∏—è –ø–æ —Ç–µ–º–µ
4. –ó–∞–ø—Ä–µ—â–µ–Ω–Ω–æ —É–Ω–∏–∂–µ–Ω–∏–µ
"""
    await update.message.reply_text(rules_text)

async def Version_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    version_text = """
–í–µ—Ä—Å–∏—è –±–æ—Ç–∞ - 1.1
–í–µ—Ä—Å–∏—è –∏–≥—Ä—ã - 1.8
"""
    await update.message.reply_text(version_text)

async def Creators_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    Creators_text = """
–î–∞–Ω–Ω—ã–µ –æ —Å–æ–∑–¥–∞—Ç–µ–ª—è—Ö:

‚Ä¢   @Set_ez - –ê–¥–º–∏–Ω
    –°–æ–∑–¥–∞–µ—Ç —Å–∫—Ä–∏–ø—Ç—ã, –¥–µ–ª–∞–µ—Ç –¥–∏–∑–∞–π–Ω –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ,
    —Å–æ–∑–¥–∞–µ—Ç –±–æ–ª—å—à—É—é —á–∞—Å—Ç—å —Ä–∞–±–æ—Ç—ã –∞ —Ç–∞–∫ –∂–µ –º–æ–∂–µ—Ç 
    —Ä–∞–±–æ—Ç–∞—Ç—å —Å —á–µ–º —É–≥–æ–¥–Ω–æ –≤ —Å—Ç—É–¥–∏–∏.

‚Ä¢   @REES3421 - –í—Ç–æ—Ä–æ–π –∞–¥–º–∏–Ω
    –°–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–º–∏—Ç–∏–≤–Ω—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏, –¥–µ–ª–∞–µ—Ç –º–µ–ª–∫–∏–π
    –¥–∏–∑–∞–π–Ω –ø–æ —Ç–∏–ø—É —Ä–∞—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∫—É—Å—Ç–∏–∫–æ–≤ –∏–ª–∏ 
    —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∂–∏–≤–∞—Ç—å –ª–æ–∫–∞—Ü–∏–∏, —Ö–æ—Ä–æ—à–æ –∑–Ω–∞–µ—Ç Python.
"""
    await update.message.reply_text(Creators_text)

async def menu_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        ['üìÖ –ü–ª–∞–Ω', 'üëÆ –ê–¥–º–∏–Ω—ã'],
        ['üìú –ü—Ä–∞–≤–∏–ª–∞', '‚ùì –ü–æ–º–æ—â—å']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=reply_markup)

async def hide_menu_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ú–µ–Ω—é —Å–∫—Ä—ã—Ç–æ! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å —Å–Ω–æ–≤–∞.",
        reply_markup=ReplyKeyboardRemove()
    )

async def handle_group_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.chat.type not in ['group', 'supergroup']:
        return

    user_text = update.message.text.lower()
    user_name = update.effective_user.first_name

    if user_text == 'üìÖ –ø–ª–∞–Ω':
        await plan_command(update, context)
        return
    elif user_text == 'üëÆ –∞–¥–º–∏–Ω—ã':
        await admin_command(update, context)
        return
    elif user_text == 'üìú –ø—Ä–∞–≤–∏–ª–∞':
        await rules_command(update, context)
        return
    elif user_text == '‚ùì –ø–æ–º–æ—â—å':
        await start_command(update, context)
        return

    keywords_responses = {
        '–ø—Ä–∏–≤–µ—Ç': f'–ü—Ä–∏–≤–µ—Ç, {user_name}! üëã',
        '–ø—Ä–æ–±–ª–µ–º–∞': '–ü—Ä–æ–±–ª–µ–º—É –º–æ–∂–µ—Ç —Ä–µ—à–∏—Ç—å Giga Chat –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –ª–∏–±–æ @Set_ez',
        '–≤ —á–µ–º —Å–º—ã—Å–ª': '–î–∞–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –∏–º–µ–µ—Ç –æ–±—à–∏—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á',
        '—á—Ç–æ –∑–∞ –±–æ—Ç—ã —Ç—É—Ç': '–ï—Å—Ç—å –±–æ—Ç –ø–æ–º–æ—â–Ω–∏–∫ - —è –∞ —Ç–∞–∫ –∂–µ –ò–ò Giga Chat',
        '—è —É—Å—Ç–∞–ª': '–æ–∫–∞–∫',
        '@set_ez': '–ê–¥–º–∏–Ω –≥—Ä—É–ø–ø—ã @Set_ez',
        'python': 'üêç Python - –ª—É—á—à–∏–π —è–∑—ã–∫ –¥–ª—è –±–æ—Ç–æ–≤!',
        '–æ—à–∏–±–∫–∞': '–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å, –ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∞–º!'
    }

    for keyword, response in keywords_responses.items():
        if keyword in user_text:
            await update.message.reply_text(response)
            break

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"–û—à–∏–±–∫–∞ –≤ update {update}: {context.error}")

# --- –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ---
def main():
    app = Application.builder().token(BOT_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler("start", start_command))
    app.add_handler(CommandHandler("plan", plan_command))
    app.add_handler(CommandHandler("planUpdate", plan_update_command))
    app.add_handler(CommandHandler("planDesign", plan_design_command))
    app.add_handler(CommandHandler("planTask", plan_task_command))
    app.add_handler(CommandHandler("admin", admin_command))
    app.add_handler(CommandHandler("rules", rules_command))
    app.add_handler(CommandHandler("Version", Version_command))
    app.add_handler(CommandHandler("Creators", Creators_command))
    app.add_handler(CommandHandler("menu", menu_command))
    app.add_handler(CommandHandler("hide", hide_menu_command))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–∞—Ö
    app.add_handler(MessageHandler(
        filters.ChatType.GROUP & filters.TEXT & ~filters.COMMAND,
        handle_group_messages
    ))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    app.add_error_handler(error_handler)

    # –ó–ê–ü–£–°–ö –î–õ–Ø RENDER
    if os.environ.get('RENDER'):
        port = int(os.environ.get('PORT', 8443))
        webhook_url = os.environ.get('WEBHOOK_URL', '')
        
        logger.info(f"–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ Webhook –Ω–∞ Render, –ø–æ—Ä—Ç: {port}")
        
        app.run_webhook(
            listen="0.0.0.0",
            port=port,
            webhook_url=webhook_url + BOT_TOKEN,
            url_path=BOT_TOKEN
        )
    else:
        logger.info("–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ Polling (—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞)...")
        app.run_polling()

if __name__ == "__main__":
    main()
